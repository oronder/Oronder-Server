services:
  oronder:
    image: ghcr.io/oronder/oronder:latest
    pull_policy: always
    command: uvicorn main:app --proxy-headers --host 0.0.0.0 --port ${UVICORN_PORT}
    hostname: oronder
    container_name: oronder
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    ports:
      - "${UVICORN_PORT}:${UVICORN_PORT}"
    depends_on:
      - oronder-db
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - API_URL=${API_URL}
      - WIKIJS_TOKEN=${WIKIJS_TOKEN}
      - WIKIJS_GRAPHQL_URL=${WIKIJS_GRAPHQL_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      - GITHUB_UPTIME_PAT=${GITHUB_UPTIME_PAT}
      - GITHUB_UPTIME_URL=${GITHUB_UPTIME_URL}
      - TZ=UTC

  oronder-db:
    image: postgres:17-alpine
    hostname: oronder-db
    container_name: oronder-db
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=UTC
      - PGTZ=UTC
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  oronder-backup:
    image: ghcr.io/oronder/oronder-backup:latest
    hostname: oronder-backup
    container_name: oronder-backup
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - b2:/root/.b2
    depends_on:
      - oronder-db
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - B2_APPLICATION_KEY_ID=${B2_APPLICATION_KEY_ID}
      - B2_APPLICATION_KEY=${B2_APPLICATION_KEY}

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300 --cleanup --include-restarting --label-enable

volumes:
  db-data:
  b2:
